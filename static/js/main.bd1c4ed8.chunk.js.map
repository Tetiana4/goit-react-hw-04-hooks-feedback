{"version":3,"sources":["Components/FeedbackOptions/FeedbackOptions.styled.js","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Notification/Notification.styled.js","Components/Notification/Notification.jsx","Components/Section/Section.styled.js","Components/Section/Section.jsx","Components/Statistics/Statistics.styled.js","Components/Statistics/Statistics.jsx","Components/App/App.jsx","index.js"],"names":["Container","styled","div","Title","h2","Button","button","List","li","FeedbackOptions","options","onHandleButton","Object","keys","map","option","type","onClick","propType","PropTypes","arrayOf","exact","string","isRequired","Message","p","Notification","message","SectionS","section","Section","title","children","protoTypes","Statistics","onGood","onNeutral","onBad","onTotal","onPercentage","App","useState","good","setGood","neutral","setNeutral","bad","setBad","countTotalFeedback","value","s","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAEaA,EAAYC,IAAOC,IAAV,qGAOTC,EAAQF,IAAOG,GAAV,2HAQLC,EAASJ,IAAOK,OAAV,6SAkBNC,EAAON,IAAOO,GAAV,kJ,OC/BF,SAASC,EAAT,GAAuD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,eACjD,OACE,eAACX,EAAD,WACE,cAACG,EAAD,oCACCS,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAM,OAC9B,cAACR,EAAD,UACE,cAACF,EAAD,CAAQW,KAAK,SAASC,QAAS,kBAAMN,EAAeI,IAApD,SACGA,KAFMA,SAUnBN,EAAgBS,SAAW,CACzBR,QAASS,IAAUC,QACjBD,IAAUE,MAAM,CACdN,OAAQI,IAAUG,OAAOC,eCpBxB,I,QAAMC,EAAUvB,IAAOwB,EAAV,oGCMLC,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,cAACH,EAAD,UAAUG,KCHNC,EAAW3B,IAAO4B,QAAV,+EAKR1B,EAAQF,IAAOG,GAAV,0CCHZ0B,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,eAACJ,EAAD,WACE,cAAC,EAAD,UAAQG,IACPC,MAKQF,IAEfA,EAAQG,WAAa,CACnBF,MAAOZ,IAAUG,QCdZ,IAAMtB,EAAYC,IAAOC,IAAV,mDAITC,EAAQF,IAAOG,GAAV,+ICQH8B,EAVI,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,UAAWC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,QAASC,EAAtC,EAAsCA,aAAtC,OACjB,eAAC,EAAD,WACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCFW,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsBJ,mBAAS,GAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KAEMC,EAAqB,WACzB,OAAON,EAAOE,EAAUE,GAsB1B,OACE,qCACE,cAACrC,EAAD,CACEC,QAAS,CAAEgC,OAAME,UAASE,OAC1BnC,eAnBgB,SAAAsC,GACpB,OAAQA,GACN,IAAK,OACHN,GAAQ,SAAAO,GAAC,OAAIA,EAAI,KACjB,MACF,IAAK,UACHL,GAAW,SAAAK,GAAC,OAAIA,EAAI,KACpB,MACF,IAAK,MACHH,GAAO,SAAAG,GAAC,OAAIA,EAAI,KAChB,MACF,QACE,WAUwB,IAAzBF,IACC,eAAC,EAAD,WACE,cAAC,EAAD,0BACA,cAAC,EAAD,CACEb,OAAQO,EACRN,UAAWQ,EACXP,MAAOS,EACPR,QAASU,IACTT,aAjCDY,KAAKC,MAAc,IAAPV,EAAcM,UAqC7B,cAAC,EAAD,CAAcrB,QAAQ,yBClD9B0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACf,EAAD,MAEFgB,SAASC,eAAe,W","file":"static/js/main.bd1c4ed8.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding: 50px;\n\n  background-color: #cea9a1;\n  text-align: center;\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 30px;\n\n  color: #452c27;\n  text-transform: uppercase;\n  font-size: 20px;\n`;\n\nexport const Button = styled.button`\n  width: 80px;\n  height: 30px;\n\n  background-color: #452c27;\n  color: #c69a91;\n\n  border-radius: 10px;\n  border: none;\n  cursor: pointer;\n  transition: all 0.25s linear 0s;\n  &:hover,\n  &:focus {\n    border: 1px solid #cea9a1;\n    transform: scale(1.1);\n  }\n`;\n\nexport const List = styled.li`\n  margin: 0 10px;\n  display: inline-flex;\n  justify-content: center;\n  text-align: center;\n\n  list-style: none;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Title, List, Button } from './FeedbackOptions.styled';\n\nexport default function FeedbackOptions({ options, onHandleButton }) {\n  return (\n    <Container>\n      <Title>Please leave feedback</Title>\n      {Object.keys(options).map(option => (\n        <List key={option}>\n          <Button type=\"button\" onClick={() => onHandleButton(option)}>\n            {option}\n          </Button>\n        </List>\n      ))}\n    </Container>\n  );\n}\n\nFeedbackOptions.propType = {\n  options: PropTypes.arrayOf(\n    PropTypes.exact({\n      option: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const Message = styled.p`\n  text-align: center;\n  text-transform: uppercase;\n  color: #ffe4e1;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from './Notification.styled';\n\nconst Notification = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string,\n}","import styled from '@emotion/styled';\r\n\r\nexport const SectionS = styled.section`\r\n  color: #eae8e8;\r\n  margin: 0;\r\n  padding: 50px;\r\n`;\r\nexport const Title = styled.h2`\r\n  margin: 0;\r\n`;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {SectionS, Title} from './Section.styled'\n\nconst Section = ({ title, children }) => {\n  return (\n    <SectionS>\n      <Title>{title}</Title>\n      {children}\n    </SectionS>\n  );\n};\n\nexport default Section;\n\nSection.protoTypes = {\n  title: PropTypes.string,\n  // не знаю як прописати children:(\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  text-align: center;\n`;\n\nexport const Title = styled.h2`\n  margin: 0 0 50px;\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 30px;\n\n  color: #ffe4e1;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container } from './Statistics.styled';\n\nconst Statistics = ({ onGood, onNeutral, onBad, onTotal, onPercentage }) => (\n  <Container>\n    <p>Good: {onGood}</p>\n    <p>Neutral: {onNeutral}</p>\n    <p>Bad: {onBad}</p>\n    <p>Total: {onTotal}</p>\n    <p>Positive feedback: {onPercentage}%</p>\n  </Container>\n);\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  onGood: PropTypes.number.isRequired,\n  onNeutral: PropTypes.number.isRequired,\n  onBad: PropTypes.number.isRequired,\n  onTotal: PropTypes.number.isRequired,\n  onPercentage: PropTypes.number.isRequired,\n};\n","import { useState } from 'react';\r\n\r\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\r\nimport Notification from '../Notification/Notification';\r\nimport Section from '../Section/Section';\r\nimport Statistics from '../Statistics/Statistics';\r\nimport { Title } from '../Statistics/Statistics.styled';\r\n\r\nexport default function App() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const countTotalFeedback = () => {\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return Math.round((good * 100) / countTotalFeedback());\r\n  };\r\n\r\n  const leaveFeedback = value => {\r\n    switch (value) {\r\n      case 'good':\r\n        setGood(s => s + 1);\r\n        break;\r\n      case 'neutral':\r\n        setNeutral(s => s + 1);\r\n        break;\r\n      case 'bad':\r\n        setBad(s => s + 1);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <FeedbackOptions\r\n        options={{ good, neutral, bad }}\r\n        onHandleButton={leaveFeedback}\r\n      />\r\n\r\n      {countTotalFeedback() !== 0 ? (\r\n        <Section>\r\n          <Title>Statistics:</Title>\r\n          <Statistics\r\n            onGood={good}\r\n            onNeutral={neutral}\r\n            onBad={bad}\r\n            onTotal={countTotalFeedback()}\r\n            onPercentage={countPositiveFeedbackPercentage()}\r\n          />\r\n        </Section>\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}